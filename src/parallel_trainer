#!/bin/bash

pid_count=3
iterations=1000
retain_time_in_days=2
routes=( "1" "10" "101" "102" "103" "104" "105" "106" "107" "108" "109" "11" "110" "111" "112" "113" "114" "115" "116" "117" "118" "119" "12" "120" "123" "124" "125" "126" "127" "128" "129" "13" "130" "131" "132" "133" "139" "14" "15" "150" "15B" "16" "17" "18" "19" "2" "20" "201" "206" "21" "22" "23" "24" "25" "26" "27" "28" "29" "3" "30" "31" "310" "32" "33" "34" "35" "36" "37" "38" "39" "4" "40" "42" "43" "44" "46" "47" "47M" "48" "5" "50" "52" "53" "54" "55" "56" "57" "58" "59" "6" "60" "61" "62" "64" "65" "66" "67" "68" "7" "70" "73" "75" "77" "78" "79" "8" "80" "84" "88" "89" "9" "90" "91" "92" "93" "94" "95" "96" "97" "98" "99" "Broad Street Line Owl" "C" "G" "H" "HXH" "J" "K" "L" "LUCY" "LUCYGO" "LUCYGR" "Market-Frankford Owl" "R" "XH" )
#SELECT DISTINCT route_id FROM septa_next_bus_db.bus_data ORDER BY route_id;

mkdir train_output

#start the first three
for (( i=0; i<$pid_count; i++ ))
do
	./next_bus -c -r "${routes[$i]}" -i $iterations -td $retain_time_in_days > train_output/train_output_"${routes[$i]}".txt &
	pids[$i]=$!
	
	echo ./next_bus -c -r "${routes[$i]}" -i $iterations -td $retain_time_in_days ... pid=${pids[$i]}
done

#start new routes as pids open up
for (( i=$pid_count; i<${#routes[*]}; ))
do

	for (( p=0; p<${#pids[*]}; p++ ))
	do
		if ps -p ${pids[$p]} > /dev/null
		then
			#echo "${pids[$p]} is running"
			:
		else
			echo "${pids[$p]} is not running"
			
			#start a new one for this item
			./next_bus -c -r "${routes[$i]}" -i $iterations -td $retain_time_in_days > train_output/train_output_${routes[$i]}.txt &
			pids[$p]=$!
			echo ./next_bus -c -r "${routes[$i]}" -i $iterations -td $retain_time_in_days ... pid=${pids[$p]}
			
			i=$((i+1))
			
			#break out so we don't potentially go over the routes amount
			break
		fi
	done
	
	sleep 1
done

#get current zero count
i=0
for (( p=0; p<${#pids[*]}; p++ ))
do
	if [ "${pids[$p]}" -eq 0 ]
	then
		i=$((i+1))
	fi
done

#wait for remaining pids to clear out
for (( ; i<${#pids[*]}; ))
do
	for (( p=0; p<${#pids[*]}; p++ ))
	do
		if [ "${pids[$p]}" -ne 0 ]
		then
			if ps -p ${pids[$p]} > /dev/null
			then
				#echo "${pids[$p]} is running"
				:
			else
				echo "${pids[$p]} is not running"
				pids[$p]=0
				i=$((i+1))
			fi
		fi
	done
	
	sleep 1
done

echo "parallel trainer finished"